name = 'LAMMPS'

version = '20220623'
local_version_date = "23Jun2022"

versionsuffix = '-omp'
modaltsoftname = 'lammps-omp'

homepage = 'https://lammps.sandia.gov/'
description = """LAMMPS is a classical molecular dynamics code, and an acronym for Large-scale Atomic/Molecular Massively Parallel Simulator. LAMMPS has potentials for solid-state materials (metals, semiconductors) and soft matter (biomolecules, polymers) and coarse-grained or mesoscopic systems. It can be used to model atoms or, more generically, as a parallel particle simulator at the atomic, meso, or continuum scale. LAMMPS runs on single processors or in parallel using message-passing techniques and a spatial-decomposition of the simulation domain. The code is designed to be easy to modify or extend with new functionality.
"""

toolchain = {'name': 'iofbf', 'version': '2020a'}
toolchainopts = {'openmp': True, 'usempi': True, 'cstd': 'c++11'}

source_urls = [GITHUB_LOWER_SOURCE]
sources = ['stable_%s.tar.gz' % local_version_date]
patches = ['%(namelower)s-%(version)s_fix-native-arch.patch']
checksums = [
    'd27ede095c9f00cd13a26f967a723d07cf8f4df65c700ed73573577bc173d5ce',  # stable_23Jun2022.tar.gz
    '96f6cdd3c0405b971ae950be440ecbb0684b01ce71d75910c0701b9ddc2f9949',  # lammps-20220623_fix-native-arch.patch
]

builddependencies = [
    ('CMake', '3.15.3'),
    ('pkg-config', '0.29.2'),
    #('archspec', '0.1.3'), 
]

dependencies = [
    ('Python', '3.8'),
    ('HDF5', '1.10.6'),
    ('netCDF', '4.7.4'),
    ('PnetCDF', '1.12.2'),
    ('GSL', '2.6'),
    ('Eigen', '3.3.7'),
    ('Voro++', '0.4.6'),
    ('kim-api', '2.3.0'),
    #('ADIOS2', '2.4.0'),
    #('PLUMED', '2.7.3'),
    #('ScaFaCoS', '1.0.1'),
    #('tbb', '2020.2'),
    #('FFmpeg', '4.2.2'),
    #('MDI_Library', '1.2.15'),
    #('CSLIB', '20180813'),
    #('MSCG', '1.7.3.1'),
    #('n2p2', '2.1.4'),
    #('ADIOS2', '2.4.0'),
    #('LATTE', '1.2.1'),    # Did not work.
    #('VTK', '8.2.0'),
]

# Complete list of packages for the current version: [ 90 ]

# "ADIOS", "ASPHERE", "ATC", "AWPMD", "BOCS", "BODY", "BPM", "BROWNIAN", 
# "CG-DNA", "CG-SDK", "CLASS2", "COLLOID", "COLVARS", "COMPRESS", "CORESHELL", 
# "DIELECTRIC", "DIFFRACTION", "DIPOLE", "DPD-BASIC", "DPD-MESO", "DPD-REACT", 
# "DPD-SMOOTH", "DRUDE", "EFF", "ELECTRODE", "EXTRA-COMPUTE", "EXTRA-DUMP", 
# "EXTRA-FIX", "EXTRA-MOLECULE", "EXTRA-PAIR", "FEP", "GPU", "GRANULAR", "H5MD", 
# "INTEL", "INTERLAYER", "KIM", "KOKKOS", "KSPACE", "LATBOLTZ", "LATTE", "MACHDYN", 
# "MANIFOLD", "MANYBODY", "MC", "MDI", "MEAM", "MESONT", "MGPT", "MISC", "ML-HDNNP", 
# "ML-IAP", "ML-PACE", "ML-QUIP", "ML-RANN", "ML-SNAP", "MOFFF", "MOLECULE", "MOLFILE", 
# "MPIIO", "MSCG", "NETCDF", "OPENMP", "OPT", "ORIENT", "PERI", "PHONON", "PLUGIN", 
# "PLUMED", "POEMS", "PTM", "PYTHON", "QEQ", "QMMM", "QTB", "REACTION", "REAXFF", 
# "REPLICA", "RIGID", "SCAFACOS", "SHOCK", "SMTBQ", "SPH", "SPIN", "SRD", "TALLY", 
# "UEF", "VORONOI", "VTK", "YAFF"

kokkos = False

build_shared_libs = True

configopts  = '-DPKG_INTEL=on -DBUILD_DOC=off -DWITH_GZIP=yes '
configopts += '-DBLAS_LIBRARIES="$LIBBLAS" '
configopts += '-DLAPACK_LIBRARIES="$LIBLAPACK" '
configopts += '-DDOWNLOAD_KIM=OFF '

general_packages = [
    "ASPHERE", "ATC", "AWPMD", "BOCS", "BODY", "BPM", "BROWNIAN", "CG-DNA", "CG-SDK", 
    "CLASS2", "COLLOID", "COLVARS", "COMPRESS", "CORESHELL", "DIELECTRIC", "DIFFRACTION", 
    "DIPOLE", "DPD-BASIC", "DPD-MESO", "DPD-REACT", "DPD-SMOOTH", "DRUDE", "EFF", "ELECTRODE", 
    "EXTRA-COMPUTE", "EXTRA-DUMP", "EXTRA-FIX", "EXTRA-MOLECULE", "EXTRA-PAIR", "FEP", "GRANULAR", 
    "H5MD", "INTEL", "INTERLAYER", "KIM", "KSPACE", "LATBOLTZ", "MACHDYN", "MANIFOLD", "MANYBODY", 
    "MC", "MDI", "MEAM", "MESONT", "MGPT", "MISC", "ML-IAP", "ML-PACE", "ML-RANN", "ML-SNAP", 
    "MOFFF", "MOLECULE", "MOLFILE", "MPIIO", "MSCG", "NETCDF", "OPENMP", "OPT", "ORIENT", "PERI", 
    "PHONON", "PLUGIN", "POEMS", "PTM", "PYTHON", "QEQ", "QTB", "REACTION", "REAXFF", "REPLICA", 
    "RIGID", "SHOCK", "SMTBQ", "SPH", "SPIN", "SRD", "TALLY", "UEF", "VORONOI", "YAFF", "QMMM",
]

user_packages = []

enhance_sanity_check = True

runtest = False

postinstallcmds =['cd %(installdir)s/bin && ln -s lmp lmp_icc_openmpi']

sanity_check_commands = ["cd %(builddir)s && python lammps_vs_yaff_test_single_point_energy.py"]

moduleclass = 'chem'
