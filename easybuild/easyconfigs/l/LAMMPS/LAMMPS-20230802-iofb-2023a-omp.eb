name = 'LAMMPS'
version = '20230802'
#version = "2Aug2023"

local_version_date = "2Aug2023-update3"

versionsuffix = '-omp'
modaltsoftname = 'lammps-omp'

homepage = 'https://www.lammps.org'
description = """LAMMPS is a classical molecular dynamics code, and an acronym
for Large-scale Atomic/Molecular Massively Parallel Simulator. LAMMPS has
potentials for solid-state materials (metals, semiconductors) and soft matter
(biomolecules, polymers) and coarse-grained or mesoscopic systems. It can be
used to model atoms or, more generically, as a parallel particle simulator at
the atomic, meso, or continuum scale. LAMMPS runs on single processors or in
parallel using message-passing techniques and a spatial-decomposition of the
simulation domain. The code is designed to be easy to modify or extend with new
functionality.
"""

toolchain = {'name': 'iofb', 'version': '2023a'}
toolchainopts = {'openmp': True, 'usempi': True}

source_urls = ['https://github.com/lammps/lammps/releases/download/stable_%s' % local_version_date.replace('-', '_')]
sources = ['lammps-src-%s.tar.gz' % local_version_date]
patches = [
    'LAMMPS-2Aug2023_install_lammps_python_package_in_eb_software_module.patch',
    'LAMMPS-2Aug2023_fix-timestep-balance-example.patch',
]
checksums = [
    {'lammps-src-2Aug2023-update3.tar.gz': '0b0bf69d7d323c25a6eeb1f483113c0da3bfbedea9878e72f15a0a3b5c492a16'},
    {'LAMMPS-2Aug2023_install_lammps_python_package_in_eb_software_module.patch':
     '723c944b62b9d28427d25e80a7a67049631702d344df49268a6846aa0cd0fe04'},
    {'LAMMPS-2Aug2023_fix-timestep-balance-example.patch':
     '6f68387ced2b4bd0a06e4c3d31b0ffd47042476777d87d8a0ca6b19a4e6a1777'},
]

builddependencies = [
    ('CMake', '3.27.7'),
    ('pkgconf', '1.9.5'),
    ('python-build-bundle', '2023b'), # for archspec
]
multi_deps = {"Python": ["3.11", "3.10"]}
dependencies = [
    ('FFTW', '3.3.10'),
    ('libpng', '1.6.39'),
    ('libjpeg-turbo', '2.1.5.1'),
    ('netCDF', '4.9.2'),
    ('PnetCDF', '1.12.3'),
    ('GSL', '2.7'),
    ('zlib', '1.2.13'),
    ('gzip', '1.12'),
    ('cURL', '8.0.1'),
    ('HDF5', '1.14.2'),
    ('PCRE', '8.45'),
    ('libxml2', '2.11.4'),
    ('FFmpeg', '6.0'),
    ('Voro++', '0.4.6'),
    ('kim-api', '2.3.0'),
    ('Eigen', '3.4.0'),
    #AK ('PLUMED', '2.9.0'),
    # VTK package is auto-disabled if this dep is not available
    #AK ('VTK', '9.3.0'),
    # We use a custom build of MDI
    #AK ('MDI', '1.4.26'),
]

# Complete list of packages for the current version: [ 92 ]

# 'ADIOS', 'AMOEBA', 'ASPHERE', 'ATC', 'AWPMD', 'BOCS', 'BODY', 'BPM', 
# 'BROWNIAN', 'CG-DNA', 'CG-SPICA', 'CLASS2', 'COLLOID', 'COLVARS', 
# 'COMPRESS', 'CORESHELL', 'DIELECTRIC', 'DIFFRACTION', 'DIPOLE', 
# 'DPD-BASIC', 'DPD-MESO', 'DPD-REACT', 'DPD-SMOOTH', 'DRUDE', 'EFF', 
# 'ELECTRODE', 'EXTRA-COMPUTE', 'EXTRA-DUMP', 'EXTRA-FIX', 
# 'EXTRA-MOLECULE', 'EXTRA-PAIR', 'FEP', 'GPU', 'GRANULAR', 'H5MD', 
# 'INTEL', 'INTERLAYER', 'KIM', 'KOKKOS', 'KSPACE', 'LATBOLTZ', 'LEPTON', 
# 'MACHDYN', 'MANIFOLD', 'MANYBODY', 'MC', 'MDI', 'MEAM', 'MESONT', 'MGPT', 
# 'MISC', 'ML-HDNNP', 'ML-IAP', 'ML-PACE', 'ML-POD', 'ML-QUIP', 'ML-RANN', 
# 'ML-SNAP', 'MOFFF', 'MOLECULE', 'MOLFILE', 'MPIIO', 'MSCG', 'NETCDF', 
# 'OPENMP', 'OPT', 'ORIENT', 'PERI', 'PHONON', 'PLUGIN', 'PLUMED', 'POEMS', 
# 'PTM', 'PYTHON', 'QEQ', 'QMMM', 'QTB', 'REACTION', 'REAXFF', 'REPLICA', 
# 'RIGID', 'SCAFACOS', 'SHOCK', 'SMTBQ', 'SPH', 'SPIN', 'SRD', 'TALLY', 
# 'UEF', 'VORONOI', 'VTK', 'YAFF'

kokkos = False

build_shared_libs = True

preconfigopts = 'ln -s %(builddir)s/lammps-* %(builddir)s/lammps-stable_%(version)s && '
configopts  = '-DPKG_INTEL=off -DBUILD_DOC=off -DWITH_GZIP=yes '
configopts += '-DBLAS_LIBRARIES="$LIBBLAS" '
configopts += '-DLAPACK_LIBRARIES="$LIBLAPACK" '
configopts += '-DDOWNLOAD_KIM=OFF '
configopts += '-DKokkos_ENABLE_OPENMP=no '
configopts += '-DPKG_KOKKOS=off '

# copying examples and potentials twice doesn't work
preinstallopts = 'rm -rf %(installdir)s/{examples,potentials} && '

# To use additional custom configuration options, use the 'configopts' easyconfig parameter
# See docs and lammps easyblock for more information.
# https://github.com/lammps/lammps/blob/master/cmake/README.md#lammps-configuration-options

# OpenMP-Kokkos build is default in the current easyblock. One can switch to serial backend of Kokkos,
# which is claimed to be faster in pure MPI calculations
# configopts  = "-DKokkos_ENABLE_SERIAL=yes "


# packages auto-enabled by easyblock
# 'GPU'    - if cuda package is present and kokkos is disabled
# 'KOKKOS' - if kokkos is enabled (by default)
# 'INTEL'  - if builing on Intel CPU
# 'OPENMP' - if OpenMP swithed on in 'toolchainopts'

# include the following extra packages into the build
general_packages = [
    'AMOEBA',
    'ASPHERE',
    'ATC',
    'AWPMD',
    'BOCS',
    'BODY',
    'BPM',
    'BROWNIAN',
    'CG-DNA',
    'CG-SPICA',
    'CLASS2',
    'COLLOID',
    'COLVARS',
    'COMPRESS',
    'CORESHELL',
    'DIELECTRIC',
    'DIFFRACTION',
    'DIPOLE',
    'DPD-BASIC',
    'DPD-MESO',
    'DPD-REACT',
    'DPD-SMOOTH',
    'DRUDE',
    'EFF',
    'ELECTRODE',
    'EXTRA-COMPUTE',
    'EXTRA-DUMP',
    'EXTRA-FIX',
    'EXTRA-MOLECULE',
    'EXTRA-PAIR',
    'FEP',
    'GRANULAR',
    'H5MD',
    'INTERLAYER',
    'KIM',
    'KSPACE',
    'LATBOLTZ',
    'LEPTON',
    'MACHDYN',
    'MANIFOLD',
    'MANYBODY',
    'MC',
    'MEAM',
    'MESONT',
    'MGPT',
    'MISC',
    'ML-IAP',
    'ML-PACE',
    'ML-POD',
    'ML-RANN',
    'ML-SNAP',
    'MOFFF',
    'MOLECULE',
    'MOLFILE',
    'MPIIO',
    'MSCG',
    'NETCDF',
    'OPT',
    'ORIENT',
    'PERI',
    'PHONON',
    'PLUGIN',
    #'PLUMED',
    'POEMS',
    'PTM',
    'PYTHON',
    'QEQ',
    'QMMM',
    'QTB',
    'REACTION',
    'REAXFF',
    'REPLICA',
    'RIGID',
    'SHOCK',
    'SMTBQ',
    'SPH',
    'SPIN',
    'SRD',
    'TALLY',
    'UEF',
    'VORONOI',
    #'VTK',
    'YAFF',
]

# Not installed yet:

# 'GPU', 'INTEL', 'KOKKOS', 'MDI', 'ML-HDNNP',
# 'ML-QUIP', 'MSCG', 'PLUMED', 'SCAFACOS', 'VTK'

# Excluded packages due to requiring additional (non-trivial) deps
# - ADIOS
# - LATTE
# - MESONT (requires very large files downloaded during build)
# - ML-HDNNP (requires N2P2)
# - ML-QUIP
# - MSCG
# - QMMM (setup seems complex)

enhance_sanity_check = True

#sanity_check_commands = ["lmp -help | wc -l"]
#sanity_check_commands = ["cd %(builddir)s && python lammps_vs_yaff_test_single_point_energy.py"]

sanity_check_paths = {
    'files': [],
    'dirs': ['share'],
}

moduleclass = 'chem'
