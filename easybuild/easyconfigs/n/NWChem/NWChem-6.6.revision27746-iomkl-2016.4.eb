name = 'NWChem'
version = '6.6.revision27746'
#verdate = '2015-10-20'
#versionsuffix = '-%s-Python-%%(pyver)s' % verdate

homepage = 'http://www.nwchem-sw.org'
description = """NWChem aims to provide its users with computational chemistry tools that are scalable both in
 their ability to treat large scientific computational chemistry problems efficiently, and in their use of available
 parallel computing resources from high-performance parallel supercomputers to conventional workstation clusters.
 NWChem software can handle: biomolecules, nanostructures, and solid-state; from quantum to classical, and all
 combinations; Gaussian basis functions or plane-waves; scaling from one to thousands of processors; properties
 and relativity."""

toolchain = {'name': 'iomkl', 'version': '2016.4'}
toolchainopts = {'i8': True}

source_urls = ['http://www.nwchem-sw.org/download.php?f=']
sources = ['Nwchem-%%(version)s-src.%s.tar.bz2' % verdate]

patches = [
    'Tddft_mxvec20.patch.gz',
    'Tools_lib64.patch.gz',
    'Config_libs66.patch.gz',
    'Cosmo_meminit.patch.gz',
    'Sym_abelian.patch.gz',
    'Xccvs98.patch.gz',
    'Dplot_tolrho.patch.gz',
    'Driver_smalleig.patch.gz',
    'Ga_argv.patch.gz',
    'Raman_displ.patch.gz',
    'Ga_defs.patch.gz',
    'Zgesvd.patch.gz',
    'Cosmo_dftprint.patch.gz',
    'Txs_gcc6.patch.gz',
    'Gcc6_optfix.patch.gz',
    'Util_gnumakefile.patch.gz',
    'Util_getppn.patch.gz',
    'Gcc6_macs_optfix.patch.gz',
    'Notdir_fc.patch.gz',
    'Xatom_vdw.patch.gz',
    'Hfmke.patch.gz',
    'NWChem_fix-date.patch',
    'NWChem-%(version)s-parallelbuild.patch',
    'NWChem-%(version)s-GNUmakefile.patch',
]

builddependencies = [('Python', '2.7.14')]

# This easyconfig is using the default for armci_network (OPENIB) and
# thus needs infiniband libraries.
osdependencies = [
    ('libibverbs-dev', 'libibverbs-devel'),
    ('libibumad-dev', 'libibumad-devel'),
]


modules = 'all python'

moduleclass = 'chem'
modluafooter = """
depends_on("python/2.7")

if mode() == "load" then
	local posix = require "posix"
	require "io"
	require "os"

	create_file_message = [[
	Creating .nwchemrc ...
	]]

	local home = os.getenv("HOME")
	local file = home .. "/.nwchemrc" 
	local default = root .. "/data/default.nwchemrc"

	if (posix.stat(file,"type") == 'regular') then
		return
	else
		LmodMessage(create_file_message)
		infile = io.open(default, "r")
		instr = infile:read("*a")
		infile:close()
	
		local outfile = io.open(file, "w")
		if outfile then
			outfile:write(instr)
			outfile:close()
		end
	end
end
"""
