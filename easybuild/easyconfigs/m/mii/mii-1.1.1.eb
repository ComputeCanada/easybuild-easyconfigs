#EasyBuild easyconfig
import os

easyblock = 'ConfigureMake'

name = 'mii'
version = '1.1.1'

homepage = 'https://github.com/codeandkey/mii'
description = """A smart search engine for module environments."""

toolchain = SYSTEM

source_urls = ['https://github.com/codeandkey/mii/archive']
sources = ['v%(version)s.tar.gz']
patches = [
    'mii-1.1.0-localization.patch',
    'mii-1.1.1-fix_arguments_with_spaces.patch', 
    'mii-1.1.1-remove-duplicates.patch',
]
checksums = [
    '4ad0eccb1d8996072a47dd9e207f8997a91511992b24d3fde959e628328cfb66',  # v1.1.1.tar.gz
    '08b8fa1971ec3c1002509a1100a5e481128d16ba0f4a317a26fc85b423486f59',  # mii-1.1.0-localization.patch
    '67dd186a74040f0430bf3bd7c00849ca7d33e8deb4963ae1debb7d3f5af4ebdf',  # mii-1.1.1-fix_arguments_with_spaces.patch
    'af147980a430f88c28ed4b10389b170bae04e6918670d481972358e488e9d8c5',  # mii-1.1.1-remove-duplicates.patch
]

# only make install is needed
skipsteps = ['configure', 'build']

installopts =  'PREFIX=%(installdir)s/ '
installopts += 'MII_ENABLE_SPIDER=yes '

_index_dir = '/cvmfs/soft.computecanada.ca/custom/mii/data'

postinstallcmds = [
    'mkdir -p %s' % _index_dir,
]

sanity_check_paths = {
    'files': ["bin/mii", "share/mii/init/bash", "share/mii/init/zsh", "share/mii/init/common"],
    'dirs': [_index_dir],
}

sanity_check_commands = [('mii', 'version')]

modluafooter = """
setenv("MII", pathJoin(root, "bin/mii"))

local shell = myShellName()

-- If shell is supported, provide shell integration
if (shell == "bash" or shell == "zsh") then
    local hook_name = "command_not_found_handle"
    local hook_def = "source " .. pathJoin(root, "share/mii/init/common") .. ' "$@"'

    -- Correct the hook name if shell is zsh
    if (shell == "zsh") then
        hook_name = hook_name .. 'r'
    end

    -- detect if the current context is being sourced
    if (shell == "zsh") then
    	hook_def = "[[ $ZSH_EVAL_CONTEXT =~ '.*file.*' ]] && SOURCED=1 || SOURCED=0; " .. hook_def
    end
    if (shell == "bash") then
    	hook_def = '[[ -n "${BASH_SOURCE[1]}" ]] && SOURCED=1 || SOURCED=0; ' .. hook_def
    end

    -- Define command not found hook
    set_shell_function(hook_name, hook_def, "")
end
""" 
