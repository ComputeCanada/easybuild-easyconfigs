easyblock = "ConfigureMake"

name = "Julia"
version = "0.5.0"

homepage = "http://julialang.org"
description = """A high-level, high-performance dynamic language for technical computing."""

toolchain = {'name': 'iimkl', 'version': '2016.4'}

source_urls = ['https://github.com/JuliaLang/julia/releases/download/v%(version)s']
sources = [SOURCELOWER_TAR_GZ]

skipsteps = ['configure']

builddependencies = [
     ('SuiteSparse', '4.5.4'),
     ('arpack-ng', '3.4.0'),
]

library_paths = "$MKLROOT/lib/intel64:$EBROOTSUITESPARSE/lib:$EBROOTARPACKMINNG/lib"
prebuildopts = "LD_LIBRARY_PATH=$LD_LIBRARY_PATH:%s"%library_paths

# Specifying JULIA_CPU_TARGET allows use on non-identical CPUs.  Doesn't affect JIT or linked toolchain components.
buildopts = " prefix=%(installdir)s"
buildopts += " USE_SYSTEM_CURL=1 USE_SYSTEM_GMP=1 USE_SYSTEM_LIBGIT2=1 USE_SYSTEM_LIBSSH2=1 USE_SYSTEM_LIBUNWIND=1 USE_SYSTEM_LLVM=1"
buildopts += " USE_SYSTEM_MPFR=1 USE_SYSTEM_PATCHELF=1 USE_SYSTEM_PCRE=1 USE_SYSTEM_SUITESPARSE=1 USE_SYSTEM_ZLIB=1 USE_SYSTEM_ARPACK=1"
buildopts += " USE_SYSTEM_MBEDTLS=1 USEICC=1 USEIFC=1 USE_INTEL_MKL=1 USE_INTEL_MKL_FFT=1 USE_INTEL_LIBM=1 JULIA_CPU_TARGET=sandybridge"
buildopts += " USE_BLAS64=0"

preinstallopts = prebuildopts
installopts = buildopts
# set rpath in Julia libraries so they can find MKL, SuiteSparse and arpack.
installopts += " && patchelf --set-rpath '$ORIGIN':'$ORIGIN/julia':$NIXUSER_PROFILE/lib:$EBROOTICC/lib/intel64:%s"%library_paths
installopts +=      " %(installdir)s/lib/libjulia-debug.so.%(version)s"
installopts += " && patchelf --set-rpath '$ORIGIN':'$ORIGIN/julia':$NIXUSER_PROFILE/lib:$EBROOTICC/lib/intel64:%s"%library_paths
installopts +=      " %(installdir)s/lib/libjulia.so.%(version)s"

sanity_check_paths = {
    'files': ["bin/julia"],
    'dirs': ["lib"]
}

moduleclass = 'lang'
