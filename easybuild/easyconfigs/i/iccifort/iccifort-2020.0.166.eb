# This is an easyconfig file for EasyBuild, see http://easybuilders.github.io/easybuild

name = 'iccifort'
version = '2020.0.166'
modaltsoftname = 'intel'

homepage = 'https://software.intel.com/en-us/intel-compilers/'
description = "Intel C, C++ & Fortran compilers"

toolchain = SYSTEM

source_urls = ['https://registrationcenter-download.intel.com/akdlm/irc_nas/tec/16229/']
sources = ['parallel_studio_xe_%(version_major)s_composer_edition.tgz']
patches = ['iccifort-%(version)s_no_mpi_rt_dependency.patch']
checksums = [
    '9168045466139b8e280f50f0606b9930ffc720bbc60bc76f5576829ac15757ae',  # parallel_studio_xe_2020_composer_edition.tgz
    # iccifort-2020.0.166_no_mpi_rt_dependency.patch
    'b7a3d1934e8ffe1712ffb82747332e025355f9f5fbef62349d0c7b4cb7e636a5',
]

local_gccver = '9.2.0'

dependencies = [
    ('GCCcore', local_gccver),
    ('binutils', '2.32', '', ('GCCcore', local_gccver)),
]

# list of regex for components to install
# full list of components can be obtained from pset/mediaconfig.xml in unpacked sources
# cfr. https://software.intel.com/en-us/articles/intel-composer-xe-2015-silent-installation-guide
components = [
    'intel-comp', 'intel-ccomp', 'intel-fcomp', 'intel-icc', 'intel-ifort',
    'intel-openmp', 'intel-ipsc?_', 'intel-gdb(?!.*mic)'
]

dontcreateinstalldir = True

license_file = "/cvmfs/soft.computecanada.ca/config/licenses/intel/computecanada.lic"
# set via modluafooter below
skip_license_file_in_module = True

#compilers_and_libraries_2020.0.166/licensing/compiler/en/credist.txt
postinstallcmds = [
  '''/cvmfs/soft.computecanada.ca/easybuild/bin/setrpaths.sh --path %(installdir)s
     /cvmfs/soft.computecanada.ca/easybuild/bin/setrpaths.sh --path %(installdir)s/compilers_and_libraries_%(version)s/linux/compiler/lib --add_origin
     installdir=%(installdir)s
     publicdir=${installdir/restricted.computecanada.ca/soft.computecanada.ca}
     for i in $(grep "compiler.*\.so" $installdir/compilers_and_libraries_%(version)s/licensing/compiler/en/credist.txt | cut -c 13-); do
       if [ -f $installdir/$i ]; then
         mkdir -p $(dirname $publicdir/$i)
         cp -p $installdir/$i $publicdir/$i
       fi
     done
     cd $installdir
     for i in compilers_and_libraries_%(version)s/linux/compiler/lib/*; do
       if [ -L $i ]; then
         cp -a $i $publicdir/$i
       fi
     done'''
]

moduleclass = 'compiler'

modluafooter = """
prepend_path("MODULEPATH", pathJoin("/cvmfs/soft.computecanada.ca/easybuild/modules/2019/Compiler/intel2020"))
prepend_path("MODULEPATH", pathJoin("/cvmfs/soft.computecanada.ca/easybuild/modules/2019", os.getenv("RSNT_ARCH"), "Compiler/intel2020"))
if isDir(pathJoin(os.getenv("HOME"), ".local/easybuild/modules/2019/Compiler/intel2020")) then
    prepend_path("MODULEPATH", pathJoin(os.getenv("HOME"), ".local/easybuild/modules/2019/Compiler/intel2020"))
end
if isDir(pathJoin(os.getenv("HOME"), ".local/easybuild/modules/2019", os.getenv("RSNT_ARCH"), "Compiler/intel2020")) then
    prepend_path("MODULEPATH", pathJoin(os.getenv("HOME"), ".local/easybuild/modules/2019", os.getenv("RSNT_ARCH"), "Compiler/intel2020"))
end

if isloaded("imkl") then
    always_load("imkl/2020.0.166")
end

add_property("type_","tools")
family("compiler")

require("SitePackage")
local found = find_and_define_license_file("INTEL_LICENSE_FILE","intel")
if (not found) then
        local error_message = [[
        We did not find a suitable license for Intel.  If you have access to one, you can create the file $HOME/.licenses/intel.lic  with the license information. If you think you should have access to one as    part of your institution, please write to support@computecanada.ca so that we can configure it.

        Nous n'avons pas trouve de licence utilisable pour Intel.  Si vous avez acces a une licence de Intel,  vous pouvez creer le fichier $HOME/.licenses/intel.lic  avec l'information de la licence. Si vous    pensez que vous devriez automatiquement avoir acces a une licence via votre institution, veuillez ecrire a support@calculcanada.ca pour que nous puissions la configurer.
        ]]
        LmodError(error_message)
end
"""
